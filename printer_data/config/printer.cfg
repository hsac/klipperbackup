# This file contains common pin mappings for the BIGTREETECH SKR mini
# E3 v3.0. To use this config, the firmware should be compiled for the
# STM32G0B1 with a "8KiB bootloader" and USB communication/USART.

# The "make flash" command does not work on the SKR mini E3. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR
# mini E3 with that SD card.

# See docs/Config_Reference.md for a description of parameters.

#====================================================================
# MCU
#====================================================================

[mcu]
# serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
# restart_method: command
# serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_4D003C000B50345033313820-if00
serial: /dev/ttyAMA0
baud: 250000
restart_method: command

[include mainsail.cfg]
#[include KAMP_Settings.cfg]

#====================================================================
# PRINTER
#====================================================================

[printer]
kinematics: cartesian
max_velocity:500
max_accel: 3333
#max_accel_to_decel: 3333
minimum_cruise_ratio: 0.35
max_z_velocity: 5
max_z_accel: 100
square_corner_velocity: 5

#====================================================================
# STEPPER X
#====================================================================

[stepper_x]
step_pin: PB13
dir_pin: !PB12
enable_pin: !PB14
microsteps: 128 #default is 16 with interpolate: true and stealthchop enabled for silent
rotation_distance: 40
endstop_pin: ^PC0
position_endstop: 1.5
position_min: 0
position_max: 230
homing_speed: 50

[tmc2209 stepper_x]
uart_pin: PC11
tx_pin: PC10
uart_address: 0
#run_current: 0.500
#run_current: 0.410
run_current: 0.580
#hold_current: 0.500
#stealthchop_threshold: 999999
interpolate: false

#====================================================================
# STEPPER Y
#====================================================================

[stepper_y]
step_pin: PB10
dir_pin: !PB2
enable_pin: !PB11
microsteps: 16 #default is 16 with interpolate: true and stealthchop enabled for silent
rotation_distance: 40
endstop_pin: ^PC1
position_endstop: -2
position_min: -2
position_max: 230
homing_speed: 50

[tmc2209 stepper_y]
uart_pin: PC11
tx_pin: PC10
uart_address: 2
#run_current: 0.500
#run_current: 0.410
run_current: 0.580
#hold_current: 0.500
#stealthchop_threshold: 999999
interpolate: false

#====================================================================
# STEPPER Z
#====================================================================

[stepper_z]
step_pin: PB0
dir_pin: PC5
enable_pin: !PB1
microsteps: 128 #default is 16 with interpolate: true and stealthchop enabled for silent
rotation_distance: 8
# endstop_pin: ^PC2
# position_endstop: 0.0
endstop_pin: probe:z_virtual_endstop
position_max: 235
position_min: -2

[tmc2209 stepper_z]
uart_pin: PC11
tx_pin: PC10
uart_address: 1
#run_current: 0.500
run_current: 0.410
#run_current: 0.580
#hold_current: 0.500
#stealthchop_threshold: 999999
interpolate: false

#====================================================================
# EXTRUDER
#====================================================================

[extruder]
max_extrude_only_distance: 1000.0
step_pin: PB3
dir_pin: !PB4
enable_pin: !PD1
microsteps:16 #default is 16 with interpolate: true and stealthchop enabled for silent
#gear_ratio: 42:12
#rotation_distance: 26.359
rotation_distance: 7.5311
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PC8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA0
min_extrude_temp: 170
min_temp: 0
max_temp: 300
#control: pid
#pid_Kp: 21.527
#pid_Ki: 1.063
#pid_Kd: 108.982

#====================================================================
# PRESSURE ADVANCE
#====================================================================

# It is recommended to calibrate your own pressure advance.
# See https://www.klipper3d.org/Pressure_Advance.html

pressure_advance: 0.055
pressure_advance_smooth_time: 0.04

[tmc2209 extruder]
uart_pin: PC11
tx_pin: PC10
uart_address: 3
#run_current: 0.410
run_current: 0.580
#hold_current: 0.500
#stealthchop_threshold: 999999
interpolate: false

#====================================================================
# FANS
#====================================================================

[heater_fan hotend_fan]
pin: PB15
heater: extruder
heater_temp: 50.0
fan_speed: .8

#[controller_fan electronic_enclosure_fan]
#pin: PC7
#idle_timeout: 60

[fan_generic scrubber]
pin: PC7

[fan]
pin: PC6

#====================================================================
# BED
#====================================================================

[heater_bed]
heater_pin: PC9
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC4
#control: pid
#pid_Kp: 54.027
#pid_Ki: 0.770
#pid_Kd: 948.182
min_temp: 0
max_temp: 130

#====================================================================
# BL TOUCH
#====================================================================

[bltouch]
sensor_pin: ^PC14
control_pin: PA1
x_offset: 44.15
y_offset: 0
#z_offset: 3.0
speed:10
samples:5
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.020
samples_tolerance_retries: 3
probe_with_touch_mode: true
stow_on_each_sample: false

######################################################################
## Filament Runout Sensor ##
######################################################################  

[filament_switch_sensor runout_sensor]
pause_on_runout: False
runout_gcode:
    M117 Out of Filament
    M600
switch_pin: PC15

######################################################################
#  BigTreeTech TFT TouchScreen emulated 12864 mode
######################################################################

[display]
lcd_type: emulated_st7920
spi_software_miso_pin: PD8 # status led, Virtual MISO
spi_software_mosi_pin: PD6
spi_software_sclk_pin: PB9
en_pin: PB8
encoder_pins: ^PA10, ^PA9
click_pin: ^!PA15

[output_pin beeper]
pin: PB5

#====================================================================
# SAFE Z HOME
#====================================================================

[safe_z_home]
home_xy_position: 72.6,110 # Change coordinates to the center of your print bed
speed: 50
z_hop: 10                 # Move up 10mm
z_hop_speed: 5

#====================================================================
# BED LEVELING
#====================================================================
# so we can run SCREWS_TILT_CALCULATE to tram the bed using the bltouch

[screws_tilt_adjust]
screw1: 0, 35
screw1_name: front left screw
screw2: 155, 35
screw2_name: front right screw
screw3: 155, 200
screw3_name: rear right screw
screw4: 0, 200
screw4_name: rear left screw
horizontal_move_z: 10.
speed: 50.
screw_thread: CW-M4

#====================================================================
# BED MESH PARAMETERS
#====================================================================
# ran with BED_MESH_CALIBRATE

[bed_mesh]
speed: 120
horizontal_move_z: 8
mesh_min: 45,5 # Probe coordinates
mesh_max: 185,225 # Make sure X,Y here meets these conditions (X+(bltouch x_offset) < bed X) and (Y+(bltouch y_offset) < Bed Y) full length measured X=225 and Y=230
probe_count: 5,5
algorithm: bicubic
fade_start: 1
fade_end: 10
fade_target: 0

#====================================================================
# INPUT SHAPER
#====================================================================

# Klipper supports Input Shaping - a technique that can be used to
# reduce ringing (also known as echoing, ghosting or rippling) in
# prints. Ringing is a surface printing defect when, typically,
# elements like edges repeat themselves on a printed surface as a
# subtle 'echo':

# Every printer is different and the ringing frequency depends on
# the printer's mechanical properties. The ringing frequency can be
# measured by printing a simple test object and measuring the
# distance between the echoes. The ringing frequency is typically
# between 50 and 100 Hz.

# https://www.klipper3d.org/Resonance_Compensation.html

# Uncomment the following lines to enable input shaping. The
# shaper_freq_x and shaper_freq_y parameters should be set to the
# ringing frequency of the printer. 

# MANUAL SETUP
[input_shaper]

shaper_freq_x: 40.66
shaper_freq_y: 25.36
shaper_type: mzv

#shaper_freq_x: 33.33
#shaper_freq_y: 27.97
#shaper_type: mzv

# # ADXL345 SETUP
# [input_shaper]
# shaper_freq_x: 68.8
# shaper_type_x: mzv
# shaper_freq_y: 44.4
# shaper_type_y: mzv

# Set up your accelerometer using the following link https://www.klipper3d.org/Measuring_Resonances.html

# # [mcu rpi]
# # serial: /tmp/klipper_host_mcu

# [adxl345]
# cs_pin: rpi:None

# [resonance_tester]
# accel_chip: adxl345
# probe_points:
#     117, 117, 20  # home probe point


[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
    EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

######################################################################
#  Start Print Macro
######################################################################

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Heat bed for probing
    M190 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Home the printer
    G28

    SET_FAN_SPEED FAN=scrubber SPEED=.9

    # If you are using QGL:
    #QUAD_GANTRY_LEVEL
    #G28 Z

    # If you are using Z-Tilt:
    #Z_TILT_ADJUST

    # If you are generating a new bed mesh:
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE ADAPTIVE=1
    
    ## NOTE:    The adaptive meshing feature requires exclude_object     ##
    ##      and may require 'Label Objects' to be enabled in the slicer  ##
    ##           To mesh without it just use BED_MESH_CALIBRATE          ##

    # If you are loading an existing mesh:
    #BED_MESH_PROFILE LOAD=default

    G1 Z50 F240
    G1 X2.0 Y10 F3000
    M109 S{EXTRUDER_TEMP}
    G1 Z0.28 F240
    G92 E0
    G1 X2.0 Y140 E10 F1500 ; prime the nozzle
    G1 X2.3 Y140 F5000
    G92 E0
    G1 X2.3 Y10 E10 F1200 ; prime the nozzle
    G92 E0

    # Move the nozzle near the bed
    #G1 Z5 F3000
    # Set and wait for nozzle to reach printing temperature
    #M109 S{EXTRUDER_TEMP}
    # Start printing!

# Enable exclude_object for adaptive meshing
[exclude_object]

######################################################################
#  End Print Macro
######################################################################

[gcode_macro END_PRINT]
#gcode:
#    # Turn off bed, extruder, and fan
#    M140 S0
#    M104 S0
#    M106 S0
#    # Move nozzle away from print while retracting
#    G91
#    G1 X-2 Y-2 E-3 F300
#    # Raise nozzle by 10mm
#    G1 Z10 F3000
#    G90
#    # Disable steppers
#    M84
#    SET_FAN_SPEED FAN=scrubber SPEED=0.3

gcode:
    #Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set min_x = printer.configfile.config["stepper_x"]["position_endstop"]|float %}
    #Check end position to determine safe directions to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
    {% set x_safe = 20.0 %}
    {% else %}
    {% set x_safe = -20.0 %}
    {% endif %}
    {% if printer.toolhead.position.y < (max_y - 20) %}
    {% set y_safe = 20.0 %}
    {% else %}
    {% set y_safe = -20.0 %}
    {% endif %}
    {% if printer.toolhead.position.z < (max_z - 2) %}
    {% set z_safe = 2.0 %}
    {% else %}
    {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    #Commence END_PRINT
    M400 ; wait for buffer to clear
    G92 E0 ; zero the extruder
    G1 E-4.0 F3600 ; retract
    G91 ; relative positioning
    G0 Z10 F3600 #G0 Z{z_safe} F3600 ; move nozzle up
    M104 S0 ; turn off hotend
    M140 S0 ; turn off bed
    M106 S0 ; turn off fan
    M107 ; turn off part cooling fan
    G90 ; absolute positioning
    G1 X{min_x} Y{max_y} F2000 ; move nozzle and present
    M84 X Y E ; Disable all steppers but Z
    SET_FAN_SPEED FAN=scrubber SPEED=0.5

#====================================================================
# PAUSE RESUME
#====================================================================

[pause_resume]
recover_velocity: 25

######################################################################
## Filament Change ##
######################################################################
# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 130mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, simply resume the print.
[gcode_macro M600]
########### Gcode ############
gcode:
  {% set X = params.X|default(printer.configfile.config["stepper_x"]["position_endstop"]|string)|int %}
  {% set Y = params.Y|default(printer.configfile.config["stepper_y"]["position_endstop"]|string)|int %}
  {% set Z = params.Z|default(10)|int %}
  {% set E = params.E|default(-20)|int %}
  {% set tool = params.tool|default(0)|int %}
  PAUSE
  G91
  G1 E-5 F4000
  G1 Z{Z}
  G90
  G1 X{X} Y{Y} F3000 ;park position
  G0 E10 F500 ;extrude filament to get better blob on end
  G0 E{E} F600 ;retract additional filament to move out of melt zone
  G92 E0

#====================================================================
# IDLE TIMEOUT 
#====================================================================

# [idle_timeout] allows Klipper to automatically shut down
# the printer after a period of inactivity, default is 5 minutes. 
# This can be useful for when needing to extend time between filament
#  swaps or pauses. I use for HueForge. 

# Time-out is in seconds, 30 minutes for safety reasons adjust
# at you own risk. 

# [idle_timeout]

# gcode:
#   {% if printer.pause_resume.is_paused %}
#     M118 Idle timeout while paused, turning off hotend
#     SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
#   {% else %}
#     M118 Idle timeout
#     TURN_OFF_HEATERS
#     M84
#   {% endif %}
# timeout: 1800 

######################################################################
#  Parks Toolhead in Pause and Cancel Print Macro
######################################################################

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg

  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

######################################################################
#  Heat Soak Macro
######################################################################  

[gcode_macro HEAT_SOAK]
description: heats the bed for a while
 
variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None
 
## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0
 
gcode:
    {% set TARGET = params.TARGET | default(0) | float %}
    {% set DURATION = (params.DURATION | default(5) | int) * 60 %} ## minutes to seconds
 
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
 
    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }
 
    ;; run the fan to circulate air
    _SET_FAN_SPEED PERCENT=50
 
    ;; put the bed and nozzle where they're a safe distance apart
    G28
    CENTER
 
    M84 ;; turn off steppers
 
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }
 
[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1
 
[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}
 
    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }
 
    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}
 
    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }
 
        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}
 
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"
 
    {% if stage in ("done", "cancel") %}
 
        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan
 
            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}
 
        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
 
    {% else %}
 
        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}
 
        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }
 
        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}

[gcode_macro _SET_FAN_SPEED]
gcode:
    M106 S{ (params.PERCENT | float) * 255 / 100 }


[gcode_macro CENTER]
gcode:
    G90
    G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } Z{ printer.toolhead.axis_maximum.z/2 } F7200

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bltouch]
#*# z_offset = 2.325
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 21.916
#*# pid_ki = 1.099
#*# pid_kd = 109.304
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 64.593
#*# pid_ki = 0.884
#*# pid_kd = 1179.633
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.070000, -0.085000, -0.047500, -0.090000, -0.102500, -0.072500, -0.075000
#*# 	-0.170000, -0.030000, 0.000000, -0.037500, -0.057500, -0.012500, -0.050000
#*# 	-0.165000, -0.235000, -0.255000, -0.255000, -0.402500, -0.237500, -0.267500
#*# 	-0.290000, -0.315000, -0.367500, -0.362500, -0.450000, -0.042500, -0.067500
#*# 	-0.290000, -0.317500, -0.365000, -0.397500, -0.477500, -0.570000, -0.637500
#*# 	-0.300000, -0.347500, -0.420000, -0.492500, -0.570000, -0.627500, -0.625000
#*# 	-0.312500, -0.345000, -0.362500, -0.390000, -0.405000, -0.280000, -0.117500
#*# x_count = 7
#*# y_count = 7
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 15.0
#*# max_x = 187.98
#*# min_y = 15.0
#*# max_y = 186.0
